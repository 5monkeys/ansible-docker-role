---

- name: Create certificates directory
  file:
    path: "{{ docker_tls_path }}"
    state: directory
  tags:
    - tls
    - tls-server
    - tls-client

- name: ca-key.pem
  openssl_privatekey:
    path: "{{ docker_tls_path }}/ca-key.pem"
    size: 8192
  register: root_cert
  notify:
    - restart docker
  tags:
    - tls
    - tls-root

- name: ca.pem
  command: >
    openssl req -new -sha256 -x509 -days 1826 \
      -subj "/O={{ docker_tls_organization }}/CN=Root CA Certificate" \
      -key ca-key.pem \
      -out ca.pem
  args:
    chdir: "{{ docker_tls_path }}"
    creates: ca.pem
  register: root_cert
  notify:
    - restart docker
  tags:
    - tls
    - tls-root

- name: server-key.pem
  openssl_privatekey:
    path: "{{ docker_tls_path }}/server-key.pem"
  notify:
    - restart docker
  tags:
    - tls
    - tls-server

- name: server.csr
  command: >
    openssl req -new -sha256 \
      -subj "/O={{ docker_tls_organization }}" \
      -key server-key.pem \
      -out server.csr
  args:
    chdir: "{{ docker_tls_path }}"
    creates: server.csr
  tags:
    - tls
    - tls-server

- name: server.cnf
  copy:
    content: |
      subjectAltName = IP:{{ ansible_eth0.ipv4.address }},IP:127.0.0.1,DNS:localhost
      extendedKeyUsage = serverAuth
    dest: "{{ docker_tls_path }}/server.cnf"
    force: yes
  tags:
    - tls
    - tls-server

- name: server-cert.pem
  command: >
    openssl x509 -req -sha256 -days 365 \
      -CAcreateserial \
      -CA ca.pem \
      -CAkey ca-key.pem \
      -extfile server.cnf \
      -in server.csr \
      -out server-cert.pem
  args:
    chdir: "{{ docker_tls_path }}"
    creates: "{{ '__force__' if root_cert is defined and root_cert|changed else 'server-cert.pem'}}"
  notify:
    - restart docker
  tags:
    - tls
    - tls-server

- name: Configure docker daemon with TLS
  template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    backup: yes
  notify:
    - restart docker
  tags:
    - tls
    - tls-server

- name: key.pem
  openssl_privatekey:
    path: "{{ docker_tls_path }}/key.pem"
  tags:
    - tls
    - tls-client

- name: client.csr
  command: >
    openssl req -new \
      -subj "/CN=client" \
      -key key.pem \
      -out client.csr
  args:
    chdir: "{{ docker_tls_path }}"
    creates: client.csr
  tags:
    - tls
    - tls-client

- name: client.cnf
  copy:
    content: extendedKeyUsage = clientAuth
    dest: "{{ docker_tls_path }}/client.cnf"
  tags:
    - tls
    - tls-client

- name: cert.pem
  command: >
    openssl x509 -req -sha256 -days 365 \
      -CAcreateserial \
      -CA ca.pem \
      -CAkey ca-key.pem \
      -extfile client.cnf \
      -in client.csr \
      -out cert.pem
  args:
    chdir: "{{ docker_tls_path }}"
    creates: "{{ '__force__' if root_cert is defined and root_cert|changed else 'cert.pem'}}"
  tags:
    - tls
    - tls-client

- name: Set key permissions
  file:
    path: "{{ docker_tls_path }}/{{ item }}"
    mode: 0400
  with_items:
    - ca-key.pem
    - server-key.pem
    - key.pem
  tags:
    - tls
    - tls-server
    - tls-client

- name: Set certificate permissions
  file:
    path: "{{ docker_tls_path }}/{{ item }}"
    mode: 0444
  with_items:
    - ca.pem
    - server-cert.pem
    - cert.pem
  tags:
    - tls
    - tls-server
    - tls-client

- name: Download client certificates
  fetch:
    src: "{{ docker_tls_path }}/{{ item }}"
    dest: "{{ docker_home }}"
    flat: yes
  with_items:
    - ca.pem
    - key.pem
    - cert.pem
  tags:
    - tls
    - tls-client
    - tls-download
